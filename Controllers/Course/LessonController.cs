using Microsoft.AspNetCore.Mvc;
using E_learning.Model.Courses;
using E_learning.DTO.Course;
using E_learning.Services;
using E_learning.Repositories.Course;
using E_learning.Services.Lesson; // [MERGE] Th√™m dependency m·ªõi
using Microsoft.AspNetCore.Authorization;
using E_learning.Enums; // [MERGE] Gi·ªØ l·∫°i dependency n√†y ƒë·ªÉ d√πng Roles
using System.Text.RegularExpressions; // [MERGE] Th√™m dependency m·ªõi

namespace E_learning.Controllers.Course
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize] // [MERGE] √Åp d·ª•ng Authorize ·ªü c·∫•p ƒë·ªô controller t·ª´ phi√™n b·∫£n HEAD
    public class LessonController : ControllerBase
    {
        private readonly ILogger<CourseController> _logger;
        private readonly ICourseRepository _courseRepo;
        private readonly GenerateID _generateID;
        private readonly CheckExsistingID _checkExsistingID;
        private readonly ConvertURL _convertURL; // [MERGE] Th√™m service m·ªõi

        // [MERGE] Constructor h·ª£p nh·∫•t, bao g·ªìm t·∫•t c·∫£ c√°c dependency
        public LessonController(
            ILogger<CourseController> logger,
            ICourseRepository courseRepo,
            GenerateID generateID,
            CheckExsistingID exsistingID,
            ConvertURL convertURL)
        {
            _logger = logger;
            _courseRepo = courseRepo;
            _generateID = generateID;
            _checkExsistingID = exsistingID;
            _convertURL = convertURL; // [MERGE] Kh·ªüi t·∫°o service m·ªõi
        }

        [HttpGet("GetLessonsByCourseID/{courseID}")]
        [ProducesResponseType(typeof(IEnumerable<LessonModel>), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetLessonsByCourseID(string courseID)
        {
            try
            {
                List<LessonModel> lessons = await _courseRepo.GetLessonsByCourseID(courseID);
                if (lessons == null || lessons.Count == 0)
                {
                    return NotFound("No lessons found for the specified course ID");
                }
                return Ok(lessons);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving lessons for course ID: {CourseID}", courseID);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpDelete("DeleteLesson/{lessonID}")]
        [Authorize(Roles = $"{nameof(UserRole.Lecturer)},{nameof(UserRole.Admin)}")] // [MERGE] Th√™m l·∫°i Authorize Roles t·ª´ HEAD
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> DeleteLesson(string lessonID)
        {
            try
            {
                bool isDeleted = await _courseRepo.DeleteLessons(lessonID);
                if (!isDeleted)
                {
                    return NotFound("Lesson not found");
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting lesson with ID: {LessonID}", lessonID);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpPost("InsertLesson")]
        [Authorize(Roles = $"{nameof(UserRole.Lecturer)},{nameof(UserRole.Admin)}")] // [MERGE] Th√™m l·∫°i Authorize Roles t·ª´ HEAD
        [ProducesResponseType(typeof(LessonModel), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> InsertLesson([FromForm] LessonDTO lesson)
        {
            // [MERGE] S·ª≠ d·ª•ng logic x·ª≠ l√Ω video t·ª´ phi√™n b·∫£n m·ªõi (80fe94d...) v√¨ n√≥ chuy√™n nghi·ªáp v√† t√°ch bi·ªát h∆°n.
            try
            {
                string lessonID = await _checkExsistingID.GenerateUniqueID(
                    _courseRepo.GetAllLessons,
                    l => l.GetLessonID(), // S·ª≠ d·ª•ng lambda expression nh·∫•t qu√°n
                    _generateID.generateLessonID
                );

                _logger.LogInformation("üÜï Generating lesson ID: {lessonId}", lessonID);

                await _convertURL.UploadVideo(lesson.videoFile, lessonID);

                string conversionResult = await _convertURL.TryConvertWithRetry(lessonID);

                var fullUrl = $"{Request.Scheme}://{Request.Host}{conversionResult}";
                var model = new LessonModel(
                    lessonID,
                    lesson.lessonTitle,
                    fullUrl,
                    lesson.courseID
                );

                bool inserted = await _courseRepo.InsertLesson(model);

                if (!inserted)
                {
                    await _convertURL.DeleteVideo(lessonID); // Clean up n·∫øu insert th·∫•t b·∫°i
                    return StatusCode(500, "Failed to insert lesson");
                }

                if (conversionResult.Contains("failed") || conversionResult.Contains("timed out"))
                {
                    return Ok(new
                    {
                        message = "Lesson inserted, but video conversion failed.",
                        lesson = model
                    });
                }

                return Ok(new
                {
                    message = "Lesson inserted successfully",
                    lesson = model
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå InsertLesson failed");
                return StatusCode(500, "Unexpected error occurred: " + ex.Message);
            }
        }

        // [MERGE] Gi·ªØ l·∫°i to√†n b·ªô endpoint m·ªõi ƒë·ªÉ x√°c th·ª±c video
        [AllowAnonymous] // NGINX s·∫Ω g·ª≠i y√™u c·∫ßu kh√¥ng c√≥ token, app s·∫Ω check token ri√™ng
        [AcceptVerbs("GET", "HEAD")]
        [Route("authorize")]
        public async Task<IActionResult> AuthorizeVideoAccess()
        {
            var uri = Request.Headers["X-Original-URI"].ToString();
            Console.WriteLine("üîç Header X-Original-URI = " + uri);

            if (string.IsNullOrEmpty(uri))
            {
                Console.WriteLine("‚ùå X-Original-URI header is missing or empty.");
                return Forbid(); // Tr·∫£ v·ªÅ 403 thay v√¨ 400
            }

            // L·∫•y token t·ª´ header Authorization
            string authorizationHeader = Request.Headers["Authorization"];
            if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith("Bearer "))
            {
                Console.WriteLine("‚ùå Authorization token is missing.");
                return Forbid();
            }
            var token = authorizationHeader.Substring("Bearer ".Length).Trim();

            // X√°c th·ª±c token v√† l·∫•y userId (b·∫°n c·∫ßn c√≥ logic n√†y, ƒë√¢y l√† v√≠ d·ª•)
            var userId = GetUserIdFromToken(token); // B·∫°n c·∫ßn t·ª± implement h√†m n√†y
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("‚ùå Invalid token or User ID is missing in the token.");
                return Forbid();
            }

            var match = Regex.Match(uri, @"^/secure/videos/([^/]+)/");
            if (!match.Success)
            {
                Console.WriteLine("‚ùå Invalid video URL format.");
                return Forbid();
            }

            var lessonId = match.Groups[1].Value;

            bool hasAccess = await _courseRepo.checkBuyCourse(userId, lessonId);
            if (!hasAccess)
            {
                Console.WriteLine($"‚ùå User {userId} does not have access to lesson {lessonId}.");
                return Forbid();
            }

            Console.WriteLine($"‚úÖ User {userId} is authorized to access lesson {lessonId}.");
            return Ok(); // Lu√¥n tr·∫£ v·ªÅ 200 OK ƒë·ªÉ NGINX cho ph√©p truy c·∫≠p
        }

        // H√†m v√≠ d·ª•, b·∫°n c·∫ßn thay th·∫ø b·∫±ng logic gi·∫£i m√£ JWT token c·ªßa m√¨nh
        private string GetUserIdFromToken(string token)
        {
            // V√≠ d·ª•: s·ª≠ d·ª•ng System.IdentityModel.Tokens.Jwt
            // var handler = new JwtSecurityTokenHandler();
            // var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
            // var userId = jsonToken.Claims.FirstOrDefault(claim => claim.Type == "UserID")?.Value;
            // return userId;
            return "user_id_from_token"; // Placeholder
        }
    }
}