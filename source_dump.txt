# ==================================================
# Path: E:\WorkSpace\.NET\E-learning
# Detected tech: csharp
# ==================================================

## DIRECTORY STRUCTURE
```
E-learning/
├── .git/
├── .github/
├── .vs/
├── Controllers/
│   ├── Course/
│   │   ├── ChoiceController.cs
│   │   ├── CourseController.cs
│   │   ├── LessonController.cs
│   │   └── QuizController.cs
│   ├── Enrollment/
│   │   └── EnrollmentController.cs
│   ├── Payment/
│   │   └── PaymentController.cs
│   ├── AuthController.cs
│   └── MeetingController.cs
├── DAL/
│   ├── Auth/
│   │   └── AuthDAL.cs
│   ├── Course/
│   │   ├── ChoiceDAL.cs
│   │   ├── CoursesDAL.cs
│   │   ├── LessonDAL.cs
│   │   └── QuizDAL.cs
│   ├── Enrollment/
│   │   └── EnrollmentDAL.cs
│   └── Payment/
│       └── PaymentDAL.cs
├── DTO/
│   ├── Auth/
│   │   ├── LoginDTO.cs
│   │   └── RegisterDTO.cs
│   ├── Course/
│   │   ├── ChoiceDTO.cs
│   │   ├── CourseDTO.cs
│   │   ├── LessonDTO.cs
│   │   └── QuizDTO.cs
│   ├── Enrollment/
│   │   └── EnrollmentDTO.cs
│   ├── Payment/
│   │   ├── PaymentRequestDTO.cs
│   │   └── PaymentResponseDTO.cs
│   └── Zoom/
│       └── CreateMeetingDTO.cs
├── Model/
│   ├── Courses/
│   │   ├── ChoiceModel.cs
│   │   ├── CoursesModel.cs
│   │   ├── LessonModel.cs
│   │   └── QuizModel.cs
│   ├── Enrollment/
│   │   └── EnrollmentModel.cs
│   ├── Message/
│   │   └── MessageModel.cs
│   ├── Payment/
│   │   └── PaymentModel.cs
│   ├── Users/
│   │   ├── UserModel.cs
│   │   └── UserRole.cs
│   └── Zoom/
│       └── ZoomMeetingResponse.cs
├── Properties/
│   └── launchSettings.json
├── Repositories/
│   ├── Auth/
│   │   ├── AuthRepository.cs
│   │   └── IAuthRepository.cs
│   ├── Course/
│   │   ├── CourseRepository.cs
│   │   └── ICourseRepository.cs
│   ├── Enrollment/
│   │   ├── EnrollmentRepository.cs
│   │   └── IEnrollmentRepository.cs
│   └── Payment/
│       ├── IPaymentRepository.cs
│       └── PaymentRepository.cs
├── Services/
│   ├── RealTimeChat/
│   │   └── SignalR.cs
│   ├── VNPay/
│   │   ├── VnPayLibrary.cs
│   │   └── VnPayService.cs
│   ├── CheckExsistingID.cs
│   ├── GenerateID.cs
│   ├── IZoomService.cs
│   └── ZoomService.cs
├── bin/
├── obj/
├── .gitignore
├── E-learning.csproj
├── E-learning.csproj.Backup.tmp
├── E-learning.csproj.user
├── E-learning.http
├── E-learning.sln
├── Program.cs
├── appsettings.Development.json
└── appsettings.json
```

## FILE CONTENTS

### Program.cs
```cs
﻿using E_learning.DAL.Auth;
using E_learning.DAL.Course;
using E_learning.Repositories.Auth;
using E_learning.Repositories.Course;
using E_learning.Repositories.Enrollment; // Thêm using này
using E_learning.DAL.Enrollment; // Thêm using này
using E_learning.Services;
using E_learning.Services.VNPay;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Lấy chuỗi kết nối
var connectionString = builder.Configuration.GetConnectionString("SqlServerConnection");

// Đăng ký các DAL
builder.Services.AddSingleton(provider => new CoursesDAL(connectionString, provider.GetRequiredService<ILogger<CoursesDAL>>()));
builder.Services.AddSingleton(provider => new LessonDAL(connectionString, provider.GetRequiredService<ILogger<LessonDAL>>()));
builder.Services.AddSingleton(provider => new QuizDAL(connectionString, provider.GetRequiredService<ILogger<QuizDAL>>()));
builder.Services.AddSingleton(provider => new ChoiceDAL(connectionString, provider.GetRequiredService<ILogger<ChoiceDAL>>()));
builder.Services.AddSingleton(provider => new AuthDAL(connectionString, provider.GetRequiredService<ILogger<AuthDAL>>()));
builder.Services.AddSingleton(provider => new EnrollmentDAL(connectionString, provider.GetRequiredService<ILogger<EnrollmentDAL>>())); // <-- THÊM DÒNG NÀY


// Đăng ký Repository và các service khác
builder.Services.AddScoped<ICourseRepository, CourseRepository>();
builder.Services.AddScoped<IAuthRepository, AuthRepository>();
builder.Services.AddScoped<IEnrollmentRepository, EnrollmentRepository>();
builder.Services.AddScoped<GenerateID>();
builder.Services.AddScoped<CheckExsistingID>();
builder.Services.AddMemoryCache();
builder.Services.AddScoped<IZoomService, ZoomService>();
builder.Services.AddScoped<VnPayService>();

// Cấu hình HttpClientFactory cho Zoom
builder.Services.AddHttpClient("Zoom", client =>
{
    client.BaseAddress = new Uri("https://api.zoom.us/v2/");
});

// Cấu hình JWT Authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
    };
});

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

// Cấu hình Swagger
builder.Services.AddSwaggerGen(options =>
{
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Enter 'Bearer' [space] and then your valid token in the text input below.\n\nExample: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\""
    });
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();

app.Run();

```

### Controllers\AuthController.cs
```cs
﻿using Microsoft.AspNetCore.Mvc;
using E_learning.Model.Users;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using E_learning.Services;
using Microsoft.AspNetCore.Authorization;
using E_learning.Enums;
using E_learning.DTO.Auth;
using E_learning.Repositories.Auth;

namespace E_learning.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthRepository _authRepo;
        private readonly IConfiguration _configuration;
        private readonly GenerateID _generateID;

        public AuthController(IAuthRepository authRepo, IConfiguration configuration, GenerateID generateID)
        {
            _authRepo = authRepo;
            _configuration = configuration;
            _generateID = generateID;
        }

        [HttpPost("register")]
        [AllowAnonymous]
        public async Task<IActionResult> Register([FromBody] RegisterDTO registerDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (!Enum.TryParse<UserRole>(registerDto.UserRole, true, out var userRoleEnum))
            {
                return BadRequest(new { Message = "Invalid user role provided. Valid roles are: Student, Lecturer, Admin." });
            }

            var userExists = await _authRepo.CheckUsernameExistsAsync(registerDto.Username);
            if (userExists)
            {
                return BadRequest(new { Message = "Username already exists" });
            }

            var user = new UserModel
            {
                UserID = _generateID.generateUserID(),
                Username = registerDto.Username,
                Email = registerDto.Email,
                FirstName = registerDto.FirstName,
                LastName = registerDto.LastName,
                Password = BCrypt.Net.BCrypt.HashPassword(registerDto.Password),
                UserRole = userRoleEnum
            };

            var result = await _authRepo.AddUserAsync(user);

            if (!result)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new { Message = "User creation failed! Please check server logs." });
            }

            return Ok(new { Message = "User created successfully!" });
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginDTO loginDto)
        {
            var user = await _authRepo.GetUserByUsernameAsync(loginDto.Username);

            if (user == null || !BCrypt.Net.BCrypt.Verify(loginDto.Password, user.Password))
            {
                return Unauthorized(new { Message = "Invalid username or password" });
            }

            var token = GenerateJwtToken(user);

            return Ok(new { token });
        }

        private string GenerateJwtToken(UserModel user)
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.UserID),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                new Claim(ClaimTypes.Role, user.UserRole.ToString())
            };

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims: claims,
                expires: DateTime.Now.AddHours(3),
                signingCredentials: credentials);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}

```

### Controllers\MeetingController.cs
```cs
﻿using E_learning.DTO.Zoom;
using E_learning.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace E_learning.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class MeetingController : ControllerBase
    {
        private readonly IZoomService _zoomService;
        private readonly ILogger<MeetingController> _logger;
        private readonly IConfiguration _configuration;

        public MeetingController(IZoomService zoomService, ILogger<MeetingController> logger, IConfiguration configuration)
        {
            _zoomService = zoomService;
            _logger = logger;
            _configuration = configuration;
        }

        [HttpPost("create")]
        public async Task<IActionResult> CreateZoomMeeting([FromBody] CreateMeetingDTO meetingDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var defaultEmail = _configuration["Zoom:DefaultMeetingUserEmail"];
            if (string.IsNullOrEmpty(defaultEmail))
            {
                _logger.LogError("Default Zoom user email is not configured.");
                return StatusCode(500, new { success = false, message = "Lỗi cấu hình máy chủ." });
            }

            if (DateTime.TryParse(meetingDto.StartTime, out var startTime) && startTime <= DateTime.UtcNow)
            {
                return BadRequest(new { success = false, message = "Thời gian bắt đầu cuộc họp phải ở tương lai." });
            }

            try
            {
                _logger.LogInformation("Đang cố gắng tạo cuộc họp Zoom cho người dùng mặc định {Email}", defaultEmail);
                var meetingResponse = await _zoomService.CreateMeetingAsync(meetingDto, defaultEmail);
                _logger.LogInformation("Đã tạo thành công cuộc họp Zoom với ID {MeetingId} cho người dùng mặc định {Email}", meetingResponse?.Id, defaultEmail);

                return Ok(new { success = true, data = meetingResponse });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Đã xảy ra lỗi không xác định khi tạo cuộc họp Zoom cho người dùng mặc định {Email}", defaultEmail);
                return StatusCode(500, new { success = false, message = "Đã xảy ra lỗi nội bộ máy chủ.", error = ex.Message });
            }
        }
        [HttpGet("test-zoom-token")]
        [AllowAnonymous]
        public async Task<IActionResult> TestZoomToken()
        {
            var result = await _zoomService.TestTokenGenerationAsync();
            if (result.Contains("failed"))
            {
                return StatusCode(500, new { success = false, message = result });
            }
            return Ok(new { success = true, message = result });
        }
    }
}

```

### Controllers\Course\ChoiceController.cs
```cs
﻿using Microsoft.AspNetCore.Mvc;
using E_learning.Model.Courses;
using System.Threading.Tasks;
using E_learning.DAL.Course;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using E_learning.DTO.Course;
using E_learning.Services;
using E_learning.Repositories.Course;
namespace E_learning.Controllers.Course
{
    [ApiController]
    [Route("api/[controller]")]
    public class ChoiceController : ControllerBase 
    {
        private readonly ILogger<CourseController> _logger;
        private readonly ICourseRepository _courseRepo;
        private readonly GenerateID _generateID;
        private readonly CheckExsistingID _checkExsistingID;

        public ChoiceController(ILogger<CourseController> logger, ICourseRepository courseRepo, GenerateID generateID, CheckExsistingID checkExsistingID)
        {
            _logger = logger;
            _courseRepo = courseRepo;
            _generateID = generateID;
            _checkExsistingID = checkExsistingID;

        }

        [HttpGet("GetChoicesByQuizID/{quizID}")]
        [ProducesResponseType(typeof(IEnumerable<ChoiceModel>), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetChoicesByQuizID(string quizID)
        {
            try
            {
                List<ChoiceModel> choices = await _courseRepo.GetChoicesByQuizID(quizID);
                if (choices == null || choices.Count == 0)
                {
                    return NotFound("No choices found for the specified quiz ID");
                }
                return Ok(choices);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving choices for quiz ID: {QuizID}", quizID);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpDelete("DeleteChoice/{choiceID}")]
        [ProducesResponseType(statusCode: 204)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> DeleteChoice(string choiceID)
        {
            try
            {
                bool isDeleted = await _courseRepo.DeleteChoice(choiceID);
                if (!isDeleted)
                {
                    return NotFound("Choice not found");
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting choice with ID: {ChoiceID}", choiceID);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpPost("InsertChoice")]
        [ProducesResponseType(typeof(ChoiceModel), statusCode: 201)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> InsertChoice([FromBody] ChoiceDTO choice)
        {
            if (choice == null)
            {
                return BadRequest("Choice data is null");
            }
            try
            {
                string newID = await _checkExsistingID.GenerateUniqueID(_courseRepo.getAllChoice, c => c.GetChoiceID(), _generateID.generateChoiceID);
                ChoiceModel choiceModel = new ChoiceModel(
                    newID,
                    choice.ChoiceText,
                    choice.IsCorrect,
                    choice.QuizID
                );
                bool isInserted = await _courseRepo.InsertChoice(choiceModel);
                if (!isInserted)
                {
                    return BadRequest("Failed to insert choice");
                }
                return CreatedAtAction(nameof(GetChoicesByQuizID), new { quizID = choice.QuizID }, choiceModel);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting choice");
                return StatusCode(500, "Internal server error");
            }
        }
    }
}

```

### Controllers\Course\CourseController.cs
```cs
﻿using Microsoft.AspNetCore.Mvc;
using E_learning.Model.Courses;
using System.Threading.Tasks;
using E_learning.DAL.Course;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using E_learning.DTO.Course;
using E_learning.Services;
using E_learning.Repositories.Course;
namespace E_learning.Controllers.Course
{
    [Route("api/[controller]")]
    [ApiController]
    public class CourseController : Controller
    {
        private readonly ILogger<CourseController> _logger;
        private readonly ICourseRepository _courseRepo;
        private readonly GenerateID _generateID;
        private readonly CheckExsistingID _checkExsistingID;
        public CourseController(ILogger<CourseController> logger, ICourseRepository courseRepo, GenerateID generateID, CheckExsistingID exsistingID)
        {
            _logger = logger;
            _courseRepo = courseRepo;
            _generateID = generateID;
            _checkExsistingID = exsistingID;
        }

        [HttpGet("GetAllCourses")]
        [ProducesResponseType(typeof(IEnumerable<CoursesModel>), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetAllCourses()
        {
            try
            {
                List<CoursesModel> courses = await _courseRepo.GetAllCourses();
                if (courses == null || courses.Count == 0)
                {
                    return NotFound("No courses found");
                }
                return Ok(courses);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all courses");
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpPost("InsertCourse")]
        [ProducesResponseType(typeof(CoursesModel), statusCode: 201)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> InsertCourse([FromBody] CourseDTO course)
        {
            if (course == null)
            {
                return BadRequest("Course data is null");
            }
            try
            {
                string newID = await _checkExsistingID.GenerateUniqueID(
                    _courseRepo.GetAllCourses,
                    c => c.GetCourseID(),
                    _generateID.generateCourseID
                );
                CoursesModel courseModel = new CoursesModel(
                    newID,
                    course.CourseName,
                    course.CoursePrice,
                    course.Author
                );
                bool isInserted = await _courseRepo.InsertCourse(courseModel);
                if (isInserted)
                {
                    return Ok(new { Message = "Course inserted successfully." });
                }
                else
                {
                    return BadRequest("Failed to insert course");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting course");
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpDelete("DeleteCourse/{courseID}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> DeleteCourse(string courseID)
        {
            if (string.IsNullOrEmpty(courseID))
            {
                return BadRequest("Course ID is null or empty");
            }
            try
            {
                bool isDeleted = await _courseRepo.DeleteCourse(courseID);
                if (isDeleted)
                {
                    return NoContent();
                }
                else
                {
                    return NotFound("Course not found");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting course with ID: {CourseID}", courseID);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpGet("GetCourseByID/{courseID}")]
        [ProducesResponseType(typeof(CoursesModel), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetCourseByID(string courseID)
        {
            if (string.IsNullOrEmpty(courseID))
            {
                return BadRequest("Course ID is null or empty");
            }
            try
            {
                CoursesModel course = await _courseRepo.GetCourseByID(courseID);
                if (course == null)
                {
                    return NotFound("Course not found");
                }
                return Ok(course);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving course with ID: {CourseID}", courseID);
                return StatusCode(500, "Internal server error");
            }
        }
    }
}

```

### Controllers\Course\LessonController.cs
```cs
﻿using Microsoft.AspNetCore.Mvc;
using E_learning.Model.Courses;
using System.Threading.Tasks;
using E_learning.DAL.Course;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using E_learning.DTO.Course;
using E_learning.Services;
using E_learning.Repositories.Course;
namespace E_learning.Controllers.Course
{
    [Route("api/[controller]")]
    [ApiController]
    public class LessonController : ControllerBase
    {
        private readonly ILogger<CourseController> _logger;
        private readonly ICourseRepository _courseRepo;
        private readonly GenerateID _generateID;
        private readonly CheckExsistingID _checkExsistingID;
        public LessonController(ILogger<CourseController> logger, ICourseRepository courseRepo, GenerateID generateID, CheckExsistingID exsistingID)
        {
            _logger = logger;
            _courseRepo = courseRepo;
            _generateID = generateID;
            _checkExsistingID = exsistingID;
        }
        [HttpGet("GetLessonsByCourseID/{courseID}")]
        [ProducesResponseType(typeof(IEnumerable<LessonModel>), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetLessonsByCourseID(string courseID)
        {
            try
            {
                List<LessonModel> lessons = await _courseRepo.GetLessonsByCourseID(courseID);
                if (lessons == null || lessons.Count == 0)
                {
                    return NotFound("No lessons found for the specified course ID");
                }
                return Ok(lessons);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving lessons for course ID: {CourseID}", courseID);
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpDelete("DeleteLesson/{lessonID}")]
        [ProducesResponseType(statusCode: 204)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> DeleteLesson(string lessonID)
        {
            try
            {
                bool isDeleted = await _courseRepo.DeleteLessons(lessonID);
                if (!isDeleted)
                {
                    return NotFound("Lesson not found");
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting lesson with ID: {LessonID}", lessonID);
                return StatusCode(500, "Internal server error");
            }
        }
        [HttpPost("InsertLesson")]
        [ProducesResponseType(typeof(LessonModel), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> InsertLesson([FromForm] LessonDTO lesson)
        {
            if (lesson == null)
            {
                return BadRequest("Lesson data is null");
            }
            if (lesson.videoFile == null || lesson.videoFile.Length == 0)
            {
                return BadRequest("Video file is null or empty");
            }
            string newID = await _checkExsistingID.GenerateUniqueID(
                   _courseRepo.GetAllLessons,
                   l => l.GetLessonID(),
                   _generateID.generateLessonID
              );
            var orgPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
            var videoPath = Path.Combine(orgPath, "videos");
            if (!Directory.Exists(videoPath))
            {
                Directory.CreateDirectory(videoPath);
            }
            var fileExt = Path.GetExtension(lesson.videoFile.FileName);
            var fileName = $"{newID}{fileExt}"; 
            // Đường dẫn lưu file
            var savePath = Path.Combine(videoPath, fileName);

            // Lưu file vào ổ đĩa
            using (var stream = new FileStream(savePath, FileMode.Create))
            {
                await lesson.videoFile.CopyToAsync(stream);
            }

            // Trả về URL truy cập video
            var videoUrl = $"{Request.Scheme}://{Request.Host}/videos/{fileName}";
            try
            {
                LessonModel lessonModel = new LessonModel(
                    newID,
                    lesson.lessonTitle,
                    videoUrl,
                    lesson.courseID
                );
                bool isInserted = await _courseRepo.InsertLesson(lessonModel);
                if (!isInserted)
                {
                    return BadRequest("Failed to insert lesson");
                }
                return Ok(new
                {
                    Message = "Lesson inserted successfully",
                    Lesson = lessonModel
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting lesson");
                return StatusCode(500, "Internal server error");
            }
        }

        //[HttpPost("upload_video")]
        //[ProducesResponseType(typeof(string), statusCode: 201)]
        //[ProducesResponseType(StatusCodes.Status400BadRequest)]
        //[ProducesResponseType(StatusCodes.Status500InternalServerError)]
        //public async Task<IActionResult> UploadVideo(IFormFile videoFile)
        //{
        //    if(videoFile == null || videoFile.Length == 0)
        //    {
        //        return BadRequest("Video file is null or empty");
        //    }
        //    var orgPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
        //    var videoPath = Path.Combine(orgPath, "videos");
        //    if(!Directory.Exists(videoPath))
        //    {
        //        Directory.CreateDirectory(videoPath);
        //    }
        //    var fileName = Path.GetFileName(videoFile.FileName);

        //    // Đường dẫn lưu file
        //    var savePath = Path.Combine(videoPath, fileName);

        //    // Lưu file vào ổ đĩa
        //    using (var stream = new FileStream(savePath, FileMode.Create))
        //    {
        //        await videoFile.CopyToAsync(stream);
        //    }

        //    // Trả về URL truy cập video
        //    var videoUrl = $"{Request.Scheme}://{Request.Host}/videos/{fileName}";
        //    return Ok(new { url = videoUrl });
        //}
    }
}

```

### Controllers\Course\QuizController.cs
```cs
﻿using E_learning.Services;
using Microsoft.AspNetCore.Mvc;
using E_learning.Model.Courses;
using E_learning.DTO.Course;
using E_learning.Repositories.Course;
namespace E_learning.Controllers.Course
{
    [ApiController]
    [Route("api/[controller]")]
    public class QuizController : ControllerBase
    {
        private readonly ILogger<CourseController> _logger;
        private readonly ICourseRepository _courseRepo;
        private readonly GenerateID _generateID;
        private readonly CheckExsistingID _checkExsistingID;
        public QuizController(ILogger<CourseController> logger, ICourseRepository courseRepo, GenerateID generateID, CheckExsistingID checkExsistingID)
        {
            _logger = logger;
            _courseRepo = courseRepo;
            _generateID = generateID;
            _checkExsistingID = checkExsistingID;

        }

        [HttpGet("GetQuizzesByCourseID/{courseID}")]
        [ProducesResponseType(typeof(IEnumerable<QuizModel>), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetQuizzesByCourseID(string courseID)
        {
            try
            {
                List<QuizModel> quizzes = await _courseRepo.GetQuizzesByCourseID(courseID);
                if (quizzes == null || quizzes.Count == 0)
                {
                    return NotFound("No quizzes found for the specified course ID");
                }
                return Ok(quizzes);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving quizzes for course ID: {CourseID}", courseID);
                return StatusCode(500, "Internal server error");
            }
        }
        [HttpDelete("DeleteQuiz/{quizID}")]
        [ProducesResponseType(statusCode: 204)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> DeleteQuiz(string quizID)
        {
            try
            {
                bool isDeleted = await _courseRepo.DeleteQuiz(quizID);
                if (!isDeleted)
                {
                    return NotFound("Quiz not found");
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting quiz with ID: {QuizID}", quizID);
                return StatusCode(500, "Internal server error");
            }
        }
        [HttpPost("InsertQuiz")]
        [ProducesResponseType(typeof(QuizModel), statusCode: 201)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> InsertQuiz([FromBody] QuizDTO quiz)
        {
            if (quiz == null)
            {
                return BadRequest("Quiz data is null");
            }
            try
            {
                string newID = await _checkExsistingID.GenerateUniqueID(_courseRepo.GetAllQuiz, q => q.getQuizID(), _generateID.generateQuizID
                );
                QuizModel quizModel = new QuizModel(
                    newID,
                    quiz.QuizTitle,
                    quiz.courseID
                );
                bool isInserted = await _courseRepo.InsertQuiz(quizModel);
                if (!isInserted)
                {
                    return BadRequest("Failed to insert quiz");
                }
                return CreatedAtAction(nameof(GetQuizzesByCourseID), new { quiz.courseID }, quizModel);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting quiz");
                return StatusCode(500, "Internal server error");
            }
        }
    }
}

```

### Controllers\Enrollment\EnrollmentController.cs
```cs
﻿using E_learning.DTO.Enrollment;
using E_learning.Model.Courses;
using E_learning.Model.Enrollment;
using E_learning.Repositories.Enrollment;
using E_learning.Services;
using Microsoft.AspNetCore.Mvc;

namespace E_learning.Controllers.Enrollment
{
    [ApiController]
    [Route("api/[controller]")]
   
    public class EnrollmentController : ControllerBase
    {
        private readonly ILogger<EnrollmentController> _logger;
        private readonly IEnrollmentRepository _enrollmentRepo;
        private readonly GenerateID _generateID;
        private readonly CheckExsistingID _checkExsistingID;
        public EnrollmentController(ILogger<EnrollmentController> logger, IEnrollmentRepository enrollmentRepo, GenerateID generateID, CheckExsistingID checkExsistingID)
        {
            _logger = logger;
            _enrollmentRepo = enrollmentRepo;
            _generateID = generateID;
            _checkExsistingID = checkExsistingID;
        }
        [HttpGet("GetAllEnrollments")]
        [ProducesResponseType(typeof(IEnumerable<EnrollmentModel>), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetAllEnrollments()
        {
            try
            {
                var enrollments = await _enrollmentRepo.GetAllEnrollments();
                if (enrollments == null || !enrollments.Any())
                {
                    return NotFound("No enrollments found");
                }
                return Ok(enrollments);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all enrollments");
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpPost("InsertEnrollment")]
        [ProducesResponseType(typeof(EnrollmentModel), statusCode: 201)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> InsertEnrollment([FromBody] EnrollmentDTO enrollment)
        {
            if (enrollment == null)
            {
                return BadRequest("Enrollment data is null");
            }
            try
            {
                string newID = await _checkExsistingID.GenerateUniqueID(_enrollmentRepo.GetAllEnrollments,e => e.GetEnrollmentID(), _generateID.GenerateEnrollmentID);
                EnrollmentModel enrollmen = new EnrollmentModel(
                    newID,
                    enrollment.UserID,
                    enrollment.CourseID
                    );
                bool isInsert = await _enrollmentRepo.InsertEnrollment(enrollmen);
                if (!isInsert)
                {
                    return BadRequest("Enrollment could not be inserted");
                }
                return CreatedAtAction(nameof(GetAllEnrollments), new { id = newID }, enrollmen);


            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting enrollment");
                return StatusCode(500, "Internal server error");
            }
        }

        [HttpGet("GetEnrollmentsByUserID/{userID}")]
        [ProducesResponseType(typeof(IEnumerable<EnrollmentModel>), statusCode: 200)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetEnrollmentsByUserID(string userID)
        {
            try
            {
                var enrollments = await _enrollmentRepo.getEnrollbyUserID(userID);
                if (enrollments == null || !enrollments.Any())
                {
                    return NotFound("No enrollments found for the specified user ID");
                }
                return Ok(enrollments);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving enrollments for user ID: {UserID}", userID);
                return StatusCode(500, "Internal server error");
            }
        }
    }
}

```

### Controllers\Payment\PaymentController.cs
```cs
﻿using E_learning.DTO.Payment;
using E_learning.Model.Payment;
using E_learning.Repositories.Payment;
using E_learning.Services;
using E_learning.Services.VNPay;
using Microsoft.AspNetCore.Mvc;

namespace E_learning.Controllers.Payment
{
    [ApiController]
    [Route("api/[controller]")]
    public class PaymentController : ControllerBase
    {
        private readonly VnPayService _vnPayService;
        private readonly IPaymentRepository _paymentRepository;
        private readonly ILogger<PaymentController> _logger;
        private readonly GenerateID _generateID;
        private readonly CheckExsistingID _checkExsistingID;
        public PaymentController(VnPayService vnPayService, ILogger<PaymentController> logger,GenerateID generateID, CheckExsistingID checkExsistingID, IPaymentRepository paymentRepository )
        {
            _vnPayService = vnPayService;
            _logger = logger;
            _generateID = generateID;
            _checkExsistingID = checkExsistingID;
            _paymentRepository = paymentRepository;
        }

        [HttpPost("create")]
        public async Task<IActionResult> Create([FromBody] PaymentRequestDTO model)
        {
            if (model == null || model.Amount <= 0)
                return BadRequest("Invalid payment information.");

            try
            {
                var paymentUrl = _vnPayService.CreatePaymentUrl(model, HttpContext, model.courseId);
                Console.WriteLine("Payment URL: " + model.courseId);
                return Ok(new
                {
                    success = true,
                    paymentUrl
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpGet("vnpay-return")]
        public async Task<IActionResult> VNPayReturn([FromQuery] string courseId)
        {
            var response = _vnPayService.PaymentExecute(HttpContext.Request.Query);
            Console.WriteLine("Response: " + response.OrderInfo);
            //string newPaymentID = await _checkExsistingID.GenerateUniqueID(
            //    _paymentRepository.getAllPaymentAsync,
            //    r => r.GetPaymentID(),
            //    _generateID.GeneratePaymentID
            //);
            string newPaymentID = "123";
            string[] name_desc_amout = response.OrderInfo.Split('|');
            string[] desc_amout = name_desc_amout[1].Split('-');
            string buyerName = name_desc_amout[0];
            string orderDescription = desc_amout[0];
            decimal orderAmount = decimal.Parse(desc_amout[1]);
            Console.WriteLine("Buyer Name: " + buyerName);
            Console.WriteLine("Order Description: " + orderDescription);
            Console.WriteLine("Order Amount: " + orderAmount);
            string courseID = courseId;
            Console.WriteLine("Course ID: " + response.OrderInfo);
            if (response.Success)
            {
                PaymentModel paymentModel = new PaymentModel(
                    newPaymentID,
                    buyerName,
                    orderDescription,
                    orderAmount,
                    courseID
                );
                //bool isSaved = await _paymentRepository.SavePaymentAsync(paymentModel);
                //if (!isSaved)
                //{
                //    _logger.LogError("Failed to save payment information for course ID: {CourseID}", courseID);
                //    return StatusCode(500, "Failed to save payment information.");
                //}
                    return Ok(new
                    {
                        success = true,
                        message = "Thanh toán thành công",
                        Object = new
                        {
                            PaymentID = newPaymentID,
                            BuyerName = buyerName,
                            OrderDescription = orderDescription,
                            OrderAmount = orderAmount,
                            CourseID = courseID
                        }
                    });
                
            }
            else
            {
                return BadRequest(new
                {
                    success = false,
                    message = "Thanh toán thất bại",
                  
                });
            }
        }
    }
}
    
```

### DAL\Auth\AuthDAL.cs
```cs
﻿using E_learning.Enums;
using E_learning.Model.Users;
using Microsoft.Data.SqlClient;

namespace E_learning.DAL.Auth
{
    public class AuthDAL
    {
        private readonly string _connectionString;
        private readonly ILogger<AuthDAL> _logger;

        public AuthDAL(string connectionString, ILogger<AuthDAL> logger)
        {
            _connectionString = connectionString;
            _logger = logger;
        }

        public async Task<UserModel> GetUserByUsername(string username)
        {
            UserModel user = null;
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Users WHERE Username = @Username";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@Username", username);
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                Enum.TryParse<UserRole>(reader.GetString(reader.GetOrdinal("UserRole")), true, out var role);

                                user = new UserModel
                                {
                                    UserID = reader.GetString(reader.GetOrdinal("UserID")),
                                    Username = reader.GetString(reader.GetOrdinal("Username")),
                                    Password = reader.GetString(reader.GetOrdinal("Password")),
                                    Email = reader.GetString(reader.GetOrdinal("Email")),
                                    FirstName = reader.GetString(reader.GetOrdinal("FirstName")),
                                    LastName = reader.GetString(reader.GetOrdinal("LastName")),
                                    UserRole = role
                                };
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving user by username: {Username}", username);
            }
            return user;
        }
        public async Task<bool> CheckUsernameExistsAsync(string username)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT COUNT(1) FROM Users WHERE Username = @Username";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@Username", username);
                        int count = (int)await command.ExecuteScalarAsync();
                        return count > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking if username exists: {Username}", username);
                return true; 
            }
        }

        public async Task AddUserAsync(UserModel user, SqlConnection connection, SqlTransaction transaction)
        {
            string query = @"INSERT INTO Users (UserID, Username, Password, Email, FirstName, LastName, UserRole) 
                             VALUES (@UserID, @Username, @Password, @Email, @FirstName, @LastName, @UserRole)";

            using (SqlCommand command = new SqlCommand(query, connection, transaction))
            {
                command.Parameters.AddWithValue("@UserID", user.UserID);
                command.Parameters.AddWithValue("@Username", user.Username);
                command.Parameters.AddWithValue("@Password", user.Password);
                command.Parameters.AddWithValue("@Email", user.Email);
                command.Parameters.AddWithValue("@FirstName", user.FirstName);
                command.Parameters.AddWithValue("@LastName", user.LastName);
                // THAY ĐỔI: Chuyển enum thành chuỗi để lưu vào DB
                command.Parameters.AddWithValue("@UserRole", user.UserRole.ToString());
                await command.ExecuteNonQueryAsync();
            }
        }

        public async Task AddStudentAsync(string studentID, string userID, SqlConnection connection, SqlTransaction transaction)
        {
            string query = "INSERT INTO Students (StudentID, UserID) VALUES (@StudentID, @UserID)";
            using (SqlCommand command = new SqlCommand(query, connection, transaction))
            {
                command.Parameters.AddWithValue("@StudentID", studentID);
                command.Parameters.AddWithValue("@UserID", userID);
                await command.ExecuteNonQueryAsync();
            }
        }

        public async Task AddLecturerAsync(string lecturerID, string userID, SqlConnection connection, SqlTransaction transaction)
        {
            string query = "INSERT INTO Lecturers (LecturerID, UserID) VALUES (@LecturerID, @UserID)";
            using (SqlCommand command = new SqlCommand(query, connection, transaction))
            {
                command.Parameters.AddWithValue("@LecturerID", lecturerID);
                command.Parameters.AddWithValue("@UserID", userID);
                await command.ExecuteNonQueryAsync();
            }
        }
        public async Task AddAdminAsync(string adminID, string userID, SqlConnection connection, SqlTransaction transaction)
        {
            string query = "INSERT INTO Admin (AdminID, UserID) VALUES (@AdminID, @UserID)";
            using (SqlCommand command = new SqlCommand(query, connection, transaction))
            {
                command.Parameters.AddWithValue("@AdminID", adminID);
                command.Parameters.AddWithValue("@UserID", userID);
                await command.ExecuteNonQueryAsync();
            }
        }
    }
}

```

### DAL\Course\ChoiceDAL.cs
```cs
﻿using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using E_learning.Model.Courses;
namespace E_learning.DAL.Course
{
    //public LessonDAL(IConfiguration configuration, ILogger<LessonDAL> logger)
    //{
    //    _connectionString = configuration.GetConnectionString("SqlServerConnection");
    //    _logger = logger;
    //}
    public class ChoiceDAL
    {
        private readonly string _connectionString;
        private readonly ILogger<ChoiceDAL> _logger;

        public ChoiceDAL(string connectionString, ILogger<ChoiceDAL> logger)
        {
            _connectionString = connectionString;
            _logger = logger;
        }
        // lấy toàn bô choices theo quizID
        public async Task<List<ChoiceModel>> GetChoicesByQuizID(string quizID)
        {
            List<ChoiceModel> choices = new List<ChoiceModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Choices WHERE QuizID = @QuizID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@QuizID", quizID);
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string choiceID = reader.GetString(reader.GetOrdinal("ChoiceID"));
                                string choiceText = reader.GetString(reader.GetOrdinal("ChoiceText"));
                                bool isCorrect = reader.GetBoolean(reader.GetOrdinal("IsCorrect"));
                                ChoiceModel choice = new ChoiceModel(choiceID, choiceText, isCorrect, quizID);
                                choices.Add(choice);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving choices for quiz ID: {QuizID}", quizID);
            }
            return choices;
        }
        // xóa một choice theo choiceID
        public async Task<bool> deleteChoice(string choiceID)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "DELETE FROM Choices WHERE ChoiceID = @ChoiceID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@ChoiceID", choiceID);
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting choice with ID: {ChoiceID}", choiceID);
                return false;
            }
        }
        // thêm một choice mới
        public async Task<bool> InsertChoice(ChoiceModel choice)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "INSERT INTO Choices (ChoiceID, ChoiceText, IsCorrect, QuizID) VALUES (@ChoiceID, @ChoiceText, @IsCorrect, @QuizID)";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@ChoiceID", choice.GetChoiceID());
                        command.Parameters.AddWithValue("@ChoiceText", choice.GetChoiceText());
                        command.Parameters.AddWithValue("@IsCorrect", choice.GetIsCorrect());
                        command.Parameters.AddWithValue("@QuizID", choice.GetQuizID());
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting choice");
                return false;
            }
        }
        // lấy hết choices
        public async Task<List<ChoiceModel>> getAllChoice()
        {
            List<ChoiceModel> choices = new List<ChoiceModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Choices";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string choiceID = reader.GetString(reader.GetOrdinal("ChoiceID"));
                                string choiceText = reader.GetString(reader.GetOrdinal("ChoiceText"));
                                bool isCorrect = reader.GetBoolean(reader.GetOrdinal("IsCorrect"));
                                string quizID = reader.GetString(reader.GetOrdinal("QuizID"));
                                ChoiceModel choice = new ChoiceModel(choiceID, choiceText, isCorrect, quizID);
                                choices.Add(choice);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all choices");
            }
            return choices;
        }
    }
}

```

### DAL\Course\CoursesDAL.cs
```cs
﻿using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Data;
using E_learning.Model;
using E_learning.Model.Courses;
namespace E_learning.DAL.Course
{
    public class CoursesDAL
    {
        private readonly string _connectionString;
        private readonly ILogger<CoursesDAL> _logger;
        public CoursesDAL(string connectionString, ILogger<CoursesDAL> logger)
        {
            _connectionString = connectionString;
            _logger = logger;
        }
        // lấy toàn bộ khóa học`
        public async Task<List<CoursesModel>> getAllCourse()
        {
            List<CoursesModel> courses = new List<CoursesModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Courses";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string courseID = reader.GetString(reader.GetOrdinal("CourseID"));
                                string courseName = reader.GetString(reader.GetOrdinal("CourseName"));
                                decimal coursePrice = reader.GetDecimal(reader.GetOrdinal("CoursePrice"));
                                string authorID = reader.GetString(reader.GetOrdinal("AuthorID"));
                                CoursesModel course = new CoursesModel(courseID, courseName, coursePrice, authorID);
                                courses.Add(course);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving courses");
            }
            return courses;
        }
        // Thêm khóa học mới
        public async Task<bool> InsertCourse(CoursesModel course)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "INSERT INTO Courses (CourseID, CourseName, CoursePrice, AuthorID) VALUES (@CourseID, @CourseName, @CoursePrice, @AuthorID)";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CourseID", course.GetCourseID());
                        command.Parameters.AddWithValue("@CourseName", course.GetCourseName());
                        command.Parameters.AddWithValue("@CoursePrice", course.GetCoursePrice());
                        command.Parameters.AddWithValue("@AuthorID", course.GetAuthorID());
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting course");
                return false;
            }
        }
        // Xóa khóa học
        public async Task<bool> deleteCourse(string courseID)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "DELETE FROM Courses WHERE CourseID = @CourseID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CourseID", courseID);
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting course");
                return false;
            }
        }
        // lấy khóa học theo ID
        public async Task<CoursesModel> getCourseByID(string courseID)
        {
            CoursesModel course = null;
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Courses WHERE CourseID = @CourseID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CourseID", courseID);
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                string courseName = reader.GetString(reader.GetOrdinal("CourseName"));
                                decimal coursePrice = reader.GetDecimal(reader.GetOrdinal("CoursePrice"));
                                string authorID = reader.GetString(reader.GetOrdinal("AuthorID"));
                                course = new CoursesModel(courseID, courseName, coursePrice, authorID);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving course by ID");
            }
            return course;
        }

        // Kiểm tra ID khóa học
        public async Task<bool> CheckCourseIDExists(string courseID)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT COUNT(*) FROM Courses WHERE CourseID = @CourseID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CourseID", courseID);
                        int count = (int)await command.ExecuteScalarAsync();
                        return count > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking if course ID exists");
                return false;
            }
        }
    }
}

```

### DAL\Course\LessonDAL.cs
```cs
﻿using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using E_learning.Model.Courses;
namespace E_learning.DAL.Course
{
    public class LessonDAL
    {
        private readonly string _connectionString;
        private readonly ILogger<LessonDAL> _logger;
        public LessonDAL(string connectionString, ILogger<LessonDAL> logger)
        {
            _connectionString = connectionString;
            _logger = logger;
        }
        // Lấy toàn bộ bài học theo CourseID
        public async Task<List<LessonModel>> GetLessonByCourseID(string courseID)
        {
            List<LessonModel> lessons = new List<LessonModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Lessons WHERE CourseID = @CourseID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CourseID", courseID);
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string lessonID = reader.GetString(reader.GetOrdinal("LessonID"));
                                string lessonTitle = reader.GetString(reader.GetOrdinal("LessonTitle"));
                                string lessonURL = reader.GetString(reader.GetOrdinal("LessonURL"));
                                LessonModel lesson = new LessonModel(lessonID, lessonTitle, lessonURL, courseID);
                                lessons.Add(lesson);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving lessons for course ID: {CourseID}", courseID);
            }
            return lessons;
        }
        // Xóa một bài học theo LessonID

        public async Task<bool> deleteLesson(string lessonID)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "DELETE FROM Lessons WHERE LessonID = @LessonID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@LessonID", lessonID);
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting lessons for course ID: {LessonID}", lessonID);
                return false;
            }
        }
        // Thêm một bài học mới
        public async Task<bool> insertLesson(LessonModel lesson)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "INSERT INTO Lessons (LessonID, LessonTitle, LessonURL, CourseID) VALUES (@LessonID, @LessonTitle, @LessonURL, @CourseID)";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@LessonID", lesson.GetLessonID());
                        command.Parameters.AddWithValue("@LessonTitle", lesson.GetLessonTitle());
                        command.Parameters.AddWithValue("@LessonURL", lesson.GetLessonURL());
                        command.Parameters.AddWithValue("@CourseID", lesson.GetCourseID());
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting lesson with ID: {LessonID}", lesson.GetLessonID());
                return false;
            }
        }
        // lấy hết lesson
        public async Task<List<LessonModel>> GetAllLessons()
        {
            List<LessonModel> lessons = new List<LessonModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Lessons";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string lessonID = reader.GetString(reader.GetOrdinal("LessonID"));
                                string lessonTitle = reader.GetString(reader.GetOrdinal("LessonTitle"));
                                string lessonURL = reader.GetString(reader.GetOrdinal("LessonURL"));
                                string courseID = reader.GetString(reader.GetOrdinal("CourseID"));
                                LessonModel lesson = new LessonModel(lessonID, lessonTitle, lessonURL, courseID);
                                lessons.Add(lesson);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all lessons");
            }
            return lessons;
        }
    }
}

```

### DAL\Course\QuizDAL.cs
```cs
﻿using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using E_learning.Model.Courses;
namespace E_learning.DAL.Course
{
    public class QuizDAL
    {
        private readonly string _connectionString;
        private readonly ILogger<QuizDAL> _logger;
        public QuizDAL(string connectionString, ILogger<QuizDAL> logger)
        {
            _connectionString = connectionString;
            _logger = logger;
        }
        // Lấy toàn bộ quiz theo CourseID
        public async Task<List<QuizModel>> GetQuizByCourseID(string courseID)
        {
            List<QuizModel> quizzes = new List<QuizModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Quiz WHERE CourseID = @CourseID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CourseID", courseID);
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string quizID = reader.GetString(reader.GetOrdinal("QuizID"));
                                string quizTitle = reader.GetString(reader.GetOrdinal("QuizTitle"));
                                QuizModel quiz = new QuizModel(quizID, quizTitle,courseID);
                                quizzes.Add(quiz);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving quizzes for course ID: {CourseID}", courseID);
            }
            return quizzes;
        }
        // Xóa một quiz theo QuizID
        public async Task<bool> DeleteQuiz(string quizID)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "DELETE FROM Quiz WHERE QuizID = @QuizID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@QuizID", quizID);
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting quiz with ID: {QuizID}", quizID);
                return false;
            }
        }
        // Thêm một quiz mới
        public async Task<bool> insertQuiz(QuizModel quiz)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "INSERT INTO Quiz (QuizID, QuizTitle, CourseID) VALUES (@QuizID, @QuizTitle, @CourseID)";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@QuizID", quiz.getQuizID());
                        command.Parameters.AddWithValue("@QuizTitle", quiz.getQuizTitle());
                        command.Parameters.AddWithValue("@CourseID", quiz.getCourseID());
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting quiz: {QuizTitle}", quiz.getQuizTitle());
                return false;
            }
        }
        // lấy hết Quiz
        public async Task<List<QuizModel>> GetAllQuiz()
        {
            List<QuizModel> quizzes = new List<QuizModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Quiz";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string quizID = reader.GetString(reader.GetOrdinal("QuizID"));
                                string quizTitle = reader.GetString(reader.GetOrdinal("QuizTitle"));
                                string courseID = reader.GetString(reader.GetOrdinal("CourseID"));
                                QuizModel quiz = new QuizModel(quizID, quizTitle, courseID);
                                quizzes.Add(quiz);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all quizzes");
            }
            return quizzes;
        }
    }
}

```

### DAL\Enrollment\EnrollmentDAL.cs
```cs
﻿using E_learning.Model.Enrollment;
using Microsoft.Data.SqlClient;
namespace E_learning.DAL.Enrollment
{
    public class EnrollmentDAL
    {
        private readonly string _connectionString;
        private readonly ILogger<EnrollmentDAL> _logger;
        public EnrollmentDAL(string connectionString, ILogger<EnrollmentDAL> logger)
        {
            _connectionString = connectionString;
            _logger = logger;
        }
        public async Task<bool> InsertEnrollment(EnrollmentModel Enroll)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "INSERT INTO Enrollment (EnrollmentID, UserID, CourseID) VALUES (@EnrollmentID, @UserID, @CourseID)";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@EnrollmentID", Enroll.GetEnrollmentID);
                        command.Parameters.AddWithValue("@UserID", Enroll.GetUserID);
                        command.Parameters.AddWithValue("@CourseID", Enroll.GetCourseID);
                   
                        int rowsAffected = await command.ExecuteNonQueryAsync();
                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error inserting enrollment for UserID: {UserID}, CourseID: {CourseID}", Enroll.GetUserID, Enroll.GetCourseID);
                return false;
            }
        }

        public async Task<List<EnrollmentModel>> GetAllEnrollments()
        {
            List<EnrollmentModel> enrollments = new List<EnrollmentModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Enrollment";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string enrollmentID = reader.GetString(reader.GetOrdinal("EnrollmentID"));
                                string userID = reader.GetString(reader.GetOrdinal("UserID"));
                                string courseID = reader.GetString(reader.GetOrdinal("CourseID"));
                                EnrollmentModel enrollment = new EnrollmentModel(enrollmentID, userID, courseID);
                                enrollments.Add(enrollment);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving enrollments");
            }
            return enrollments;
        }

        public async Task<List<EnrollmentModel>> getEnrollbyUserID(string userID)
        {
            List<EnrollmentModel> enrollments = new List<EnrollmentModel>();
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    string query = "SELECT * FROM Enrollment WHERE UserID = @UserID";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@UserID", userID);
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                string enrollmentID = reader.GetString(reader.GetOrdinal("EnrollmentID"));
                                string courseID = reader.GetString(reader.GetOrdinal("CourseID"));
                                EnrollmentModel enrollment = new EnrollmentModel(enrollmentID, userID, courseID);
                                enrollments.Add(enrollment);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving enrollments for UserID: {UserID}", userID);
            }
            return enrollments;
        }
    }
}

```

### DAL\Payment\PaymentDAL.cs
```cs
﻿using E_learning.Model.Payment;
using Microsoft.Data.SqlClient;

namespace E_learning.DAL.Payment
{
    public class PaymentDAL
    {
        private readonly string _connectionString;
        private readonly ILogger<PaymentDAL> _logger;
        public PaymentDAL(string connectionString, ILogger<PaymentDAL> logger)
        {
            _connectionString = connectionString;
            _logger = logger;
        }

        public async Task<bool> SavePaymentAsync(PaymentModel paymentModel)
        {
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    var query = "INSERT INTO Payments (PaymentID, buyerName, Description, Amout, CourseID) VALUES (@PaymentID, @buyerName, @Description, @Amout, @CourseID)";
                    var command = new SqlCommand(query, connection);
                    command.Parameters.AddWithValue("@PaymentID", paymentModel.GetPaymentID);
                    command.Parameters.AddWithValue("@buyerName", paymentModel.GetBuyerName);
                    command.Parameters.AddWithValue("@Description", paymentModel.GetDescription);
                    command.Parameters.AddWithValue("@Amout", paymentModel.GetPaymentID);
                    command.Parameters.AddWithValue("@CourseID", paymentModel.GetCourseId);
                    var result = await command.ExecuteNonQueryAsync();
                    return result > 0;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error saving payment to database.");
                return false;
            }
        }

        public async Task<List<PaymentModel>> getAllPaymentAsync()
        {
            List<PaymentModel> payments = new List<PaymentModel>();
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();
                    var query = "SELECT PaymentID, buyerName, Description, Amout, CourseID FROM Payments";
                    var command = new SqlCommand(query, connection);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            string paymentId = reader.GetString(reader.GetOrdinal("PaymentID"));
                            string buyerName = reader.GetString(reader.GetOrdinal("buyerName"));
                            string description = reader.GetString(reader.GetOrdinal("Description"));
                            decimal amount = reader.GetDecimal(reader.GetOrdinal("Amout"));
                            string courseId = reader.GetString(reader.GetOrdinal("CourseID"));
                            var payment = new PaymentModel(paymentId, buyerName, description, amount, courseId);
                            payments.Add(payment);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving payments from database.");
            }
            return payments;
        }

    }
}

```

### DTO\Auth\LoginDTO.cs
```cs
﻿using System.ComponentModel.DataAnnotations;

namespace E_learning.DTO.Auth
{
    public class LoginDTO
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}

```

### DTO\Auth\RegisterDTO.cs
```cs
﻿using E_learning.Enums;
using System.ComponentModel.DataAnnotations;

namespace E_learning.DTO.Auth
{
    public class RegisterDTO
    {
        [Required(ErrorMessage = "Username is required")]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "User role is required")]
        [EnumDataType(typeof(UserRole), ErrorMessage = "Invalid User Role. Valid roles are Student, Lecturer, Admin.")]
        public string UserRole { get; set; } = "Student";
    }
}

```

### DTO\Course\ChoiceDTO.cs
```cs
﻿using System.ComponentModel.DataAnnotations;

namespace E_learning.DTO.Course
{
    public class ChoiceDTO
    {
        [Required(ErrorMessage = "Choice text is required")]
        public string ChoiceText { get; set; }
        [Required(ErrorMessage = "IsCorrect field is required")]
        public bool IsCorrect { get; set; }
        [Required(ErrorMessage = "Quiz ID is required")]
        public string QuizID { get; set; }
    }
}

```

### DTO\Course\CourseDTO.cs
```cs
﻿using System.ComponentModel.DataAnnotations;

namespace E_learning.DTO.Course
{
    public class CourseDTO
    {
        [Required(ErrorMessage = "Course name is not null")]
        public string CourseName { get; set; }

        [Required(ErrorMessage = "Course price is not null")]
        [Range(0, double.MaxValue, ErrorMessage = "Course price must be positive")]
        public decimal CoursePrice { get; set; }
        [Required(ErrorMessage = "Author is not null")]
        public string Author { get; set; }


    }
}

```

### DTO\Course\LessonDTO.cs
```cs
﻿using System.ComponentModel.DataAnnotations;

namespace E_learning.DTO.Course
{
    public class LessonDTO
    {
        [Required(ErrorMessage = "Lesson title is required")]
        public string lessonTitle { get; set; }
        public string courseID { get; set; }
        public IFormFile videoFile { get; set; }
    }
}

```

### DTO\Course\QuizDTO.cs
```cs
﻿using System.ComponentModel.DataAnnotations;

namespace E_learning.DTO.Course
{
    public class QuizDTO
    {
        [Required(ErrorMessage = "Quiz title is required")]
        public string QuizTitle { get; set; }
        [Required(ErrorMessage = "Course ID is required")]
        public string courseID { get; set; }
    }
}

```

### DTO\Enrollment\EnrollmentDTO.cs
```cs
﻿namespace E_learning.DTO.Enrollment
{
    public class EnrollmentDTO
    {
        public string UserID { get; set; }
        public string CourseID { get; set; }
      
    }
}

```

### DTO\Payment\PaymentRequestDTO.cs
```cs
﻿namespace E_learning.DTO.Payment
{
    public class PaymentRequestDTO
    {
        public string OrderType { get; set; } = "other";
        public double Amount { get; set; }
        public string OrderDescription { get; set; }
        public string Name { get; set; }

        public string courseId { get; set; }
    }
}

```

### DTO\Payment\PaymentResponseDTO.cs
```cs
﻿namespace E_learning.DTO.Payment
{
    public class PaymentResponseDTO
    {
        public string OrderInfo { get; set; }
        public string TransactionId { get; set; }
        public string OrderId { get; set; }
        public string PaymentMethod { get; set; }
        public string PaymentId { get; set; }
        public bool Success { get; set; }
        public string Token { get; set; }
        public string VnPayResponseCode { get; set; }
        public string Message { get; set; } // Add this line
    }
}

```

### DTO\Zoom\CreateMeetingDTO.cs
```cs
﻿using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization; // Add this line

namespace E_learning.DTO.Zoom
{
    public class CreateMeetingDTO
    {
        [Required(ErrorMessage = "Topic is required")]
        [StringLength(200, ErrorMessage = "Topic cannot exceed 200 characters")]
        public string Topic { get; set; }

        [Range(1, 8, ErrorMessage = "Type must be between 1 and 8")]
        public int Type { get; set; } = 2;

        [Required(ErrorMessage = "Start time is required")]
        public string StartTime { get; set; }

        [Range(1, 1440, ErrorMessage = "Duration must be between 1 and 1440 minutes")]
        public int Duration { get; set; }

        public string Timezone { get; set; } = "Asia/Ho_Chi_Minh";

        public string? Agenda { get; set; }

        // Add the [JsonPropertyName] attribute to ensure correct serialization
        [JsonPropertyName("password")]
        public string? Password { get; set; }
    }
}
```

### Model\Courses\ChoiceModel.cs
```cs
﻿namespace E_learning.Model.Courses
{
    public class ChoiceModel
    {
        private string ChoiceID { get; set; }
        private string ChoiceText { get; set; }
        private bool IsCorrect { get; set; }
        private string QuizID { get; set; }

        public string GetChoiceID()
        {
            return ChoiceID;
        }
        public void SetChoiceID(string choiceID)
        {
            ChoiceID = choiceID;
        }
        public string GetChoiceText()
        {
            return ChoiceText;
        }
        public void SetChoiceText(string choiceText)
        {
            ChoiceText = choiceText;
        }
        public bool GetIsCorrect()
        {
            return IsCorrect;
        }
        public void SetIsCorrect(bool isCorrect)
        {
            IsCorrect = isCorrect;
        }
        public string GetQuizID()
        {
            return QuizID;
        }
        public void SetQuizID(string quizID)
        {
            QuizID = quizID;
        }
        public ChoiceModel(string choiceID, string choiceText, bool isCorrect, string quizID)
        {
            ChoiceID = choiceID;
            ChoiceText = choiceText;
            IsCorrect = isCorrect;
            QuizID = quizID;
        }

    }
}

```

### Model\Courses\CoursesModel.cs
```cs
﻿namespace E_learning.Model.Courses
{
    public class CoursesModel
    {
        private string courseID { get; set; }
        private string courseName { get; set; }
        private decimal coursePrice { get; set; }
        private string authorID { get; set; }

        public string GetCourseID()
        {
            return courseID;
        }
        public void SetCourseID(string courseID)
        {
            this.courseID = courseID;
        }
        public string GetCourseName()
        {
            return courseName;
        }
        public void SetCourseName(string courseName)
        {
            this.courseName = courseName;
        }
        public decimal GetCoursePrice()
        {
            return coursePrice;
        }
        public void SetCoursePrice(decimal coursePrice)
        {
            this.coursePrice = coursePrice;
        }
        public string GetAuthorID()
        {
            return authorID;
        }
        public void SetAuthorID(string authorID)
        {
            this.authorID = authorID;
        }
        public CoursesModel(string courseID, string courseName, decimal coursePrice, string authorID)
        {
            this.courseID = courseID;
            this.courseName = courseName;
            this.coursePrice = coursePrice;
            this.authorID = authorID;
        }
    }
}

```

### Model\Courses\LessonModel.cs
```cs
﻿namespace E_learning.Model.Courses
{
    public class LessonModel
    {
        private string lessonID { get; set; }
        private string lessonTitle { get; set; }
        private string lessonURL { get; set; }
        private string courseID { get; set; }

        public string GetLessonID()
        {
            return lessonID;
        }
        public void SetLessonID(string lessonID)
        {
            this.lessonID = lessonID;
        }

        public string GetLessonTitle()
        {
            return lessonTitle;
        }
        public void SetLessonTitle(string lessonTitle)
        {
            this.lessonTitle = lessonTitle;
        }
        public string GetLessonURL()
        {
            return lessonURL;
        }
        public void SetLessonURL(string lessonURL)
        {
            this.lessonURL = lessonURL;
        }
        public string GetCourseID()
        {
            return courseID;
        }
        public void SetCourseID(string courseID)
        {
            this.courseID = courseID;
        }
        public LessonModel(string lessonID, string lessonTitle, string lessonURL, string courseID)
        {
            this.lessonID = lessonID;
            this.lessonTitle = lessonTitle;
            this.lessonURL = lessonURL;
            this.courseID = courseID;
        }
    }
}

```

### Model\Courses\QuizModel.cs
```cs
﻿namespace E_learning.Model.Courses
{
    public class QuizModel
    {
        private string quizID { get; set; }
        private string quizTitle { get; set; }
        private string courseID { get; set; }
        public string getQuizID()
        {
            return quizID;
        }
        public void setQuizID(string quizID)
        {
            this.quizID = quizID;
        }
        public string getQuizTitle()
        {
            return quizTitle;
        }
        public void setQuizTitle(string quizTitle)
        {
            this.quizTitle = quizTitle;
        }
        public string getCourseID()
        {
            return courseID;
        }
        public void setCourseID(string courseID)
        {
            this.courseID = courseID;
        }
        public QuizModel(string quizID, string quizTitle, string courseID)
        {
            this.quizID = quizID;
            this.quizTitle = quizTitle;
            this.courseID = courseID;
        }
    }
}

```

### Model\Enrollment\EnrollmentModel.cs
```cs
﻿namespace E_learning.Model.Enrollment
{
    public class EnrollmentModel
    {
        private string enrollmenID { get; set; }
        private string userID { get; set; }
        private string courseID { get; set; }

        public string GetEnrollmentID()
        {
            return enrollmenID;
        }
        public void SetEnrollmentID(string enrollmentID)
        {
            this.enrollmenID = enrollmentID;
        }
        public string GetUserID()
        {
            return userID;
        }
        public void SetUserID(string userID)
        {
            this.userID = userID;
        }
        public string GetCourseID()
        {
            return courseID;
        }
        public void SetCourseID(string courseID)
        {
            this.courseID = courseID;
        }
        public EnrollmentModel(string enrollmentID, string userID, string courseID)
        {
            this.enrollmenID = enrollmentID;
            this.userID = userID;
            this.courseID = courseID;
        }
    }
}

```

### Model\Message\MessageModel.cs
```cs
﻿namespace E_learning.Model.Message
{
    public class MessageModel
    {
    }
}

```

### Model\Payment\PaymentModel.cs
```cs
﻿namespace E_learning.Model.Payment
{
    public class PaymentModel
    {
        private string PaymentID { get; set; }
        private string BuyerName { get; set; }
        private string Description { get; set; }
        private decimal Amount { get; set; }

        private string courseId { get; set; }

        public string GetPaymentID()
        {
            return PaymentID;
        }
        public void SetPaymentID(string paymentId)
        {
            PaymentID = paymentId;
        }
        public string GetBuyerName()
        {
            return BuyerName;
        }
        public void SetBuyerName(string buyerName)
        {
            BuyerName = buyerName;
        }
        public string GetDescription()
        {
            return Description;
        }
        public void SetDescription(string description)
        {
            Description = description;
        }
        public decimal GetAmount()
        {
            return Amount;
        }
        public void SetAmount(decimal amount)
        {
            Amount = amount;
        }
        public string GetCourseId()
        {
            return courseId;
        }
        public void SetCourseId(string courseId)
        {
            this.courseId = courseId;
        }
        public PaymentModel(string paymentId, string buyerName, string description, decimal amount, string courseId)
        {
            PaymentID = paymentId;
            BuyerName = buyerName;
            Description = description;
            Amount = amount;
            this.courseId = courseId;
        }
    }
}

```

### Model\Users\UserModel.cs
```cs
﻿using E_learning.Enums;

namespace E_learning.Model.Users
{
    public class UserModel
    {
        public string UserID { get; set; }
        public string Username { get; set; }
        public string Password { get; set; } 
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public UserRole UserRole { get; set; }
    }
}

```

### Model\Users\UserRole.cs
```cs
﻿namespace E_learning.Enums
{
    public enum UserRole
    {
        Student,
        Lecturer,
        Admin
    }
}

```

### Model\Zoom\ZoomMeetingResponse.cs
```cs
﻿namespace E_learning.Model.Zoom
{
    public class ZoomMeetingResponse
    {
        public long Id { get; set; }
        public string Topic { get; set; }
        public string StartTime { get; set; }
        public int Duration { get; set; }
        public string JoinUrl { get; set; }
        public string Password { get; set; }
    }
}

```

### Repositories\Auth\AuthRepository.cs
```cs
﻿using E_learning.DAL.Auth;
using E_learning.Enums;
using E_learning.Model.Users;
using E_learning.Services;
using Microsoft.Data.SqlClient;

namespace E_learning.Repositories.Auth
{
    public class AuthRepository : IAuthRepository
    {
        private readonly AuthDAL _authDAL;
        private readonly IConfiguration _configuration;
        private readonly GenerateID _generateID;

        public AuthRepository(AuthDAL authDAL, IConfiguration configuration, GenerateID generateID)
        {
            _authDAL = authDAL;
            _configuration = configuration;
            _generateID = generateID;
        }

        public async Task<bool> AddUserAsync(UserModel user)
        {
            string connectionString = _configuration.GetConnectionString("SqlServerConnection");
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                using (SqlTransaction transaction = connection.BeginTransaction())
                {
                    try
                    {
                        await _authDAL.AddUserAsync(user, connection, transaction);

                        switch (user.UserRole)
                        {
                            case UserRole.Student:
                                string studentID = _generateID.generateStudentID();
                                await _authDAL.AddStudentAsync(studentID, user.UserID, connection, transaction);
                                break;
                            case UserRole.Lecturer:
                                string lecturerID = _generateID.generateLecturerID();
                                await _authDAL.AddLecturerAsync(lecturerID, user.UserID, connection, transaction);
                                break;
                            case UserRole.Admin:
                                string adminID = _generateID.generateAdminID();
                                await _authDAL.AddAdminAsync(adminID, user.UserID, connection, transaction);
                                break;
                            default:
                                throw new Exception($"Invalid user role for database insertion: {user.UserRole}");
                        }
                        await transaction.CommitAsync();
                        return true;
                    }
                    catch (Exception ex)
                    {
                        await transaction.RollbackAsync();
                        return false;
                    }
                }
            }
        }

        public Task<bool> CheckUsernameExistsAsync(string username) => _authDAL.CheckUsernameExistsAsync(username);

        public Task<UserModel> GetUserByUsernameAsync(string username) => _authDAL.GetUserByUsername(username);
    }
}

```

### Repositories\Auth\IAuthRepository.cs
```cs
﻿using E_learning.Model.Users;

namespace E_learning.Repositories.Auth
{
    public interface IAuthRepository
    {
        Task<UserModel> GetUserByUsernameAsync(string username);
        Task<bool> CheckUsernameExistsAsync(string username);
        Task<bool> AddUserAsync(UserModel user);
    }
}

```

### Repositories\Course\CourseRepository.cs
```cs
﻿using E_learning.DAL.Course;
using E_learning.Model.Courses;

namespace E_learning.Repositories.Course
{
    public class CourseRepository : ICourseRepository
    {
         
        private readonly CoursesDAL _coursesDAL;
        private readonly LessonDAL _lessonDAL;
        private readonly QuizDAL _quizDAL;
        private readonly ChoiceDAL _choiceDAL;

        public CourseRepository(
            CoursesDAL coursesDAL,
            LessonDAL lessonDAL,
            QuizDAL quizDAL,
            ChoiceDAL choiceDAL)
        {
            _coursesDAL = coursesDAL;
            _lessonDAL = lessonDAL;
            _quizDAL = quizDAL;
            _choiceDAL = choiceDAL;
        }
        // Course methods
        public Task<List<CoursesModel>> GetAllCourses() => _coursesDAL.getAllCourse();
        public Task<CoursesModel> GetCourseByID(string courseID) => _coursesDAL.getCourseByID(courseID);
        public Task<bool> InsertCourse(CoursesModel course) => _coursesDAL.InsertCourse(course);
        public Task<bool> DeleteCourse(string courseID) => _coursesDAL.deleteCourse(courseID);
       
        // Lesson methods
        public Task<List<LessonModel>> GetLessonsByCourseID(string courseID) => _lessonDAL.GetLessonByCourseID(courseID);
        public Task<bool> DeleteLessons(string lessionID) => _lessonDAL.deleteLesson(lessionID);
        public Task<bool> InsertLesson(LessonModel lesson) => _lessonDAL.insertLesson(lesson);
        public Task<List<LessonModel>> GetAllLessons() => _lessonDAL.GetAllLessons();
        // Quiz methods
        public Task<List<QuizModel>> GetQuizzesByCourseID(string courseID) => _quizDAL.GetQuizByCourseID(courseID);
        public Task<bool> DeleteQuiz(string quizID) => _quizDAL.DeleteQuiz(quizID);
        public Task<bool> InsertQuiz(QuizModel quiz) => _quizDAL.insertQuiz(quiz);
        public Task<List<QuizModel>> GetAllQuiz() => _quizDAL.GetAllQuiz();
        // Choice methods
        public Task<List<ChoiceModel>> GetChoicesByQuizID(string quizID) => _choiceDAL.GetChoicesByQuizID(quizID);
        public Task<bool> DeleteChoice(string choiceID) => _choiceDAL.deleteChoice(choiceID);
        public Task<bool> InsertChoice(ChoiceModel choice) => _choiceDAL.InsertChoice(choice);
        public Task<List<ChoiceModel>> getAllChoice() => _choiceDAL.getAllChoice();
    }
}


```

### Repositories\Course\ICourseRepository.cs
```cs
﻿using E_learning.Model.Courses;

namespace E_learning.Repositories.Course
{
    public interface ICourseRepository
    {
       
            // Courses
            Task<List<CoursesModel>> GetAllCourses();
            Task<CoursesModel> GetCourseByID(string courseID);
            Task<bool> InsertCourse(CoursesModel course);
            Task<bool> DeleteCourse(string courseID);
       

        // Lessons
            Task<List<LessonModel>> GetLessonsByCourseID(string courseID);
            Task<bool> DeleteLessons(string courseID);
            Task<bool> InsertLesson(LessonModel lesson);
            Task<List<LessonModel>> GetAllLessons();

        // Quizzes
        Task<List<QuizModel>> GetQuizzesByCourseID(string courseID);
            Task<bool> DeleteQuiz(string quizID);
            Task<bool> InsertQuiz(QuizModel quiz);
            Task<List<QuizModel>> GetAllQuiz();
        // Choices
        Task<List<ChoiceModel>> GetChoicesByQuizID(string quizID);
            Task<bool> DeleteChoice(string choiceID);
            Task<bool> InsertChoice(ChoiceModel choice);
            Task<List<ChoiceModel>> getAllChoice();

    }
}

```

### Repositories\Enrollment\EnrollmentRepository.cs
```cs
﻿using E_learning.DAL.Enrollment;
using E_learning.Model.Enrollment;

namespace E_learning.Repositories.Enrollment
{
    public class EnrollmentRepository : IEnrollmentRepository
    {
        private readonly EnrollmentDAL _enrollmentDAL;
        public EnrollmentRepository(EnrollmentDAL enrollmentDAL)
        {
            _enrollmentDAL = enrollmentDAL;
        }
        public Task<bool> InsertEnrollment(EnrollmentModel enrollment) => _enrollmentDAL.InsertEnrollment(enrollment);
        public Task<List<EnrollmentModel>> GetAllEnrollments() => _enrollmentDAL.GetAllEnrollments();
        public Task<List<EnrollmentModel>> getEnrollbyUserID(string userID) => _enrollmentDAL.getEnrollbyUserID(userID);
    }
}

```

### Repositories\Enrollment\IEnrollmentRepository.cs
```cs
﻿using E_learning.Model.Enrollment;

namespace E_learning.Repositories.Enrollment
{
    public interface IEnrollmentRepository
    {
        Task<List<EnrollmentModel>> getEnrollbyUserID(string userID);
        Task<bool> InsertEnrollment(EnrollmentModel enrollment);
        Task<List<EnrollmentModel>> GetAllEnrollments();
    }
}

```

### Repositories\Payment\IPaymentRepository.cs
```cs
﻿using E_learning.Model.Payment;

namespace E_learning.Repositories.Payment
{
    public interface IPaymentRepository
    {
        Task<bool> SavePaymentAsync(PaymentModel paymentModel);
        Task<List<PaymentModel>> getAllPaymentAsync();
    }
}

```

### Repositories\Payment\PaymentRepository.cs
```cs
﻿using E_learning.DAL.Payment;
using E_learning.Model.Payment;

namespace E_learning.Repositories.Payment
{
    public class PaymentRepository : IPaymentRepository
    {
        private readonly PaymentDAL _paymentDAL;
        public PaymentRepository(PaymentDAL paymentDAL)
        {
            _paymentDAL = paymentDAL;
        }

        public Task<List<PaymentModel>> getAllPaymentAsync()
        {
           return _paymentDAL.getAllPaymentAsync();
        }

        public Task<bool> SavePaymentAsync(PaymentModel paymentModel)
        {
            return _paymentDAL.SavePaymentAsync(paymentModel);
        }
    }
}

```

### Services\CheckExsistingID.cs
```cs
﻿namespace E_learning.Services
{
    public class CheckExsistingID
    {
        public async Task<string> GenerateUniqueID<TModel>(Func<Task<List<TModel>>> getAllFunc,Func<TModel, string> getIDFunc, Func<string> generateIDFunc)
        {
            var existingModels = await getAllFunc();
            var existingIDs = existingModels
                .Select(getIDFunc)
                .ToHashSet();

            string newID;
            do
            {
                newID = generateIDFunc();
            }
            while (existingIDs.Contains(newID));

            return newID;
        }
    }
}

```

### Services\GenerateID.cs
```cs
﻿using System.Security.Cryptography;
namespace E_learning.Services
{
    public class GenerateID
    {
        // automatically generate unique IDs for Course
        public string generateID()
        {
            byte[] bytes = new byte[4];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(bytes);
            }
            int number = Math.Abs(BitConverter.ToInt32(bytes, 0)) % 1000000;
            string numberString = number.ToString("D6");
            return numberString;
        }
        public string generateCourseID() {
            string numberString = generateID();
            return $"CID{numberString}";
        }
        // automatically generate unique IDs for Lesson
        public string generateLessonID() {
            string numberString = generateID();
            return $"LID{numberString}";
        }
        // automatically generate unique IDs for Quiz
        public string generateQuizID() {
            string numberString = generateID();
            return $"QID{numberString}";
        }
        // automatically generate unique IDs for Choice
        public string generateChoiceID() {
            string numberString = generateID();
            return $"CHID{numberString}";
        }

        public string generateUserID()
        {
            string numberString = generateID();
            return $"UID{numberString}";
        }
        public string GenerateEnrollmentID()
        {
            string numberString = generateID();
            return $"ENID{numberString}";
        }

        public string generateStudentID() => $"SID{generateID()}";
        public string generateLecturerID() => $"LEC{generateID()}";
        public string generateAdminID() => $"ADID{generateID()}";

        public string GeneratePaymentID()
        {
            string numberString = generateID();
            return $"PID{numberString}";
        }

    }
}
```

### Services\IZoomService.cs
```cs
﻿using E_learning.DTO.Zoom;
using E_learning.Model.Zoom;

namespace E_learning.Services
{
    public interface IZoomService
    {
        Task<ZoomMeetingResponse> CreateMeetingAsync(CreateMeetingDTO meetingDto, string email);
        Task<string> TestTokenGenerationAsync();
    }
}
```

### Services\ZoomService.cs
```cs
﻿using E_learning.DTO.Zoom;
using E_learning.Model.Zoom;
using Microsoft.Extensions.Caching.Memory;
using System.Globalization;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;

namespace E_learning.Services
{
    public class ZoomService : IZoomService
    {
        private readonly IConfiguration _configuration;
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly IMemoryCache _memoryCache;
        private readonly ILogger<ZoomService> _logger;

        public ZoomService(IConfiguration configuration, IHttpClientFactory httpClientFactory, IMemoryCache memoryCache, ILogger<ZoomService> logger)
        {
            _configuration = configuration;
            _httpClientFactory = httpClientFactory;
            _memoryCache = memoryCache;
            _logger = logger;
        }

        public async Task<ZoomMeetingResponse> CreateMeetingAsync(CreateMeetingDTO meetingDto, string email)
        {
            int retryCount = 0;
            const int maxRetries = 2;

            while (retryCount < maxRetries)
            {
                var accessToken = await GetZoomAccessTokenAsync();
                var client = _httpClientFactory.CreateClient("Zoom");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

                var meetingObject = new
                {
                    topic = meetingDto.Topic,
                    type = 2,
                    start_time = meetingDto.StartTime,
                    duration = meetingDto.Duration,
                    timezone = meetingDto.Timezone,
                    settings = new
                    {
                        join_before_host = true,
                        mute_upon_entry = true,
                        participant_video = true,
                        host_video = true,
                        auto_recording = "none"
                    }
                };

                var jsonContent = JsonSerializer.Serialize(meetingObject);
                var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                var response = await client.PostAsync($"users/{email}/meetings", content);

                if (response.IsSuccessStatusCode)
                {
                    var responseString = await response.Content.ReadAsStringAsync();
                    return JsonSerializer.Deserialize<ZoomMeetingResponse>(responseString, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
                }

                var error = await response.Content.ReadAsStringAsync();
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized && error.Contains("Invalid access token"))
                {
                    _memoryCache.Remove("ZoomAccessToken");
                    retryCount++;
                    _logger.LogWarning("Invalid Zoom access token. Retrying {RetryCount}/{MaxRetries}", retryCount, maxRetries);
                    continue;
                }

                _logger.LogError("Zoom API Error on meeting creation. Status: {StatusCode}, Response: {Error}, RequestBody: {Body}", response.StatusCode, error, jsonContent);
                throw new Exception($"Failed to create Zoom meeting. Zoom API returned: {response.StatusCode} - {error}");
            }

            throw new Exception("Failed to create Zoom meeting after maximum retries due to invalid access token.");
        }

        private async Task<string> GetZoomAccessTokenAsync()
        {
            const string cacheKey = "ZoomAccessToken";
            if (_memoryCache.TryGetValue(cacheKey, out string accessToken))
            {
                _logger.LogInformation("Retrieved Zoom access token from cache.");
                return accessToken;
            }

            var clientId = _configuration["Zoom:ClientId"];
            var clientSecret = _configuration["Zoom:ClientSecret"];
            var accountId = _configuration["Zoom:AccountId"];

            if (string.IsNullOrWhiteSpace(clientId) || string.IsNullOrWhiteSpace(clientSecret) || string.IsNullOrWhiteSpace(accountId))
            {
                _logger.LogError("Zoom configuration is missing in appsettings.json.");
                throw new InvalidOperationException("Zoom configuration (ClientId, ClientSecret, AccountId) is missing.");
            }

            var client = _httpClientFactory.CreateClient();
            var request = new HttpRequestMessage(HttpMethod.Post, "https://zoom.us/oauth/token");

            var authValue = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{clientId}:{clientSecret}"));
            request.Headers.Authorization = new AuthenticationHeaderValue("Basic", authValue);

            request.Content = new FormUrlEncodedContent(new Dictionary<string, string>
    {
        { "grant_type", "account_credentials" },
        { "account_id", accountId }
    });

            _logger.LogInformation("Requesting new Zoom access token for Account ID: {AccountId}", accountId);
            var response = await client.SendAsync(request);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                _logger.LogError("Failed to get Zoom access token. Status: {StatusCode}, Response: {Response}, ClientId: {ClientId}, AccountId: {AccountId}", response.StatusCode, responseContent, clientId, accountId);
                throw new Exception($"Failed to get Zoom access token. Status: {response.StatusCode}, Error: {responseContent}");
            }

            var tokenData = JsonDocument.Parse(responseContent).RootElement;
            accessToken = tokenData.GetProperty("access_token").GetString();
            var expiresIn = tokenData.GetProperty("expires_in").GetInt32();

            _memoryCache.Set(cacheKey, accessToken, TimeSpan.FromSeconds(expiresIn - 300));
            _logger.LogInformation("Successfully obtained and cached new Zoom access token.");
            return accessToken;
        }

        public async Task<string> TestTokenGenerationAsync()
        {
            try
            {
                var token = await GetZoomAccessTokenAsync();
                return $"Token generated successfully. Length: {token?.Length ?? 0}";
            }
            catch (Exception ex)
            {
                return $"Token generation failed: {ex.Message}";
            }
        }
    }
}

```

### Services\RealTimeChat\SignalR.cs
```cs
﻿using Microsoft.AspNetCore.Connections.Features;
using Microsoft.AspNetCore.SignalR;

namespace E_learning.Services.RealTimeChat
{
    public class SignalR : Hub
    {
        private readonly Dictionary<string,List<string>> _conncetion = new();

        public async Task registerConnect(string userID)
        { 
            var connectionId = Context.ConnectionId;
            if (!_conncetion.ContainsKey(userID)) { 
                _conncetion.Add(userID, new List<string>());
                _conncetion[userID].Add(connectionId);
            } else
            {
                var list = _conncetion[userID];
                lock (list)
                {
                    if (!list.Contains(connectionId))
                    {
                        list.Add(connectionId);
                    }
                }
            }
        }

        public async Task removeConnect(string userID)
        {
            var connectionId = Context.ConnectionId;
            if (_conncetion.ContainsKey(userID))
            {
                var list = _conncetion[userID];
                lock (list)
                {
                    if (list.Contains(connectionId))
                    {
                        list.Remove(connectionId);
                    }
                }
                if (list.Count == 0)
                {
                    _conncetion.Remove(userID);
                }
            }
        }
    }
}

```

### Services\VNPay\VnPayLibrary.cs
```cs
﻿using System.Globalization;
using System.Net.Sockets;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using E_learning.DTO.Payment;

namespace E_learning.Services.VNPay
{
    public class VnPayLibrary
    {
        private readonly SortedList<string, string> _requestData = new SortedList<string, string>(new VnPayCompare());
        private readonly SortedList<string, string> _responseData = new SortedList<string, string>(new VnPayCompare());


        public PaymentResponseDTO GetFullResponseData(IQueryCollection collection, string hashSecret)
        {
            var vnPay = new VnPayLibrary();
            foreach (var (key, value) in collection)
            {
                if (!string.IsNullOrEmpty(key) && key.StartsWith("vnp_"))
                {
                    vnPay.AddResponseData(key, value);
                }
            }
            var orderId = Convert.ToInt64(vnPay.GetResponseData("vnp_TxnRef"));
            var vnPayTranId = Convert.ToInt64(vnPay.GetResponseData("vnp_TransactionNo"));
            var vnpResponseCode = vnPay.GetResponseData("vnp_ResponseCode");
            var vnpSecureHash =
                collection.FirstOrDefault(k => k.Key == "vnp_SecureHash").Value; //hash của dữ liệu trả về
            var orderInfo = vnPay.GetResponseData("vnp_OrderInfo");
            var checkSignature =
                vnPay.ValidateSignature(vnpSecureHash, hashSecret); //check Signature
            if (!checkSignature)
                return new PaymentResponseDTO()
                {
                    Success = false
                };
            var isSuccess = vnpResponseCode == "00";
            return new PaymentResponseDTO()
            {
                Success = isSuccess,
                PaymentMethod = "VnPay",
                OrderInfo = orderInfo,
                OrderId = orderId.ToString(),
                PaymentId = vnPayTranId.ToString(),
                TransactionId = vnPayTranId.ToString(),
                Token = vnpSecureHash,
                VnPayResponseCode = vnpResponseCode
            };
        }
        public string GetIpAddress(HttpContext context)
        {
            var ipAddress = string.Empty;
            try
            {
                var remoteIpAddress = context.Connection.RemoteIpAddress;

                if (remoteIpAddress != null)
                {
                    if (remoteIpAddress.AddressFamily == AddressFamily.InterNetworkV6)
                    {
                        remoteIpAddress = Dns.GetHostEntry(remoteIpAddress).AddressList
                            .FirstOrDefault(x => x.AddressFamily == AddressFamily.InterNetwork);
                    }

                    if (remoteIpAddress != null) ipAddress = remoteIpAddress.ToString();

                    return ipAddress;
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }

            return "127.0.0.1";
        }

        public void AddRequestData(string key, string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                _requestData.Add(key, value);
            }
        }

        public void AddResponseData(string key, string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                _responseData.Add(key, value);
            }
        }
        public string GetResponseData(string key)
        {
            return _responseData.TryGetValue(key, out var retValue) ? retValue : string.Empty;
        }
        public string CreateRequestUrl(string baseUrl, string vnpHashSecret)
        {
            var data = new StringBuilder();

            foreach (var (key, value) in _requestData.Where(kv => !string.IsNullOrEmpty(kv.Value)))
            {
                data.Append(WebUtility.UrlEncode(key) + "=" + WebUtility.UrlEncode(value) + "&");
            }

            var querystring = data.ToString();
            Console.WriteLine("Query String: " + querystring);
            baseUrl += "?" + querystring;
            var signData = querystring;
            if (signData.Length > 0)
            {
                signData = signData.Remove(data.Length - 1, 1);
            }
            Console.WriteLine("Sign Data: " + signData);

            var vnpSecureHash = HmacSha512(vnpHashSecret, signData);
            baseUrl += "vnp_SecureHash=" + vnpSecureHash;
            return baseUrl;

        }

        public bool ValidateSignature(string inputHash, string secretKey)
        {
            var rspRaw = GetResponseData();
            var myChecksum = HmacSha512(secretKey, rspRaw);
            return myChecksum.Equals(inputHash, StringComparison.InvariantCultureIgnoreCase);
        }
        private string HmacSha512(string key, string inputData)
        {
            var hash = new StringBuilder();
            var keyBytes = Encoding.UTF8.GetBytes(key);
            var inputBytes = Encoding.UTF8.GetBytes(inputData);
            using (var hmac = new HMACSHA512(keyBytes))
            {
                var hashValue = hmac.ComputeHash(inputBytes);
                foreach (var theByte in hashValue)
                {
                    hash.Append(theByte.ToString("x2"));
                }
            }

            return hash.ToString();
        }

        private string GetResponseData()
        {
            var data = new StringBuilder();
            if (_responseData.ContainsKey("vnp_SecureHashType"))
            {
                _responseData.Remove("vnp_SecureHashType");
            }

            if (_responseData.ContainsKey("vnp_SecureHash"))
            {
                _responseData.Remove("vnp_SecureHash");
            }

            foreach (var (key, value) in _responseData.Where(kv => !string.IsNullOrEmpty(kv.Value)))
            {
                data.Append(WebUtility.UrlEncode(key) + "=" + WebUtility.UrlEncode(value) + "&");
            }

            //remove last '&'
            if (data.Length > 0)
            {
                data.Remove(data.Length - 1, 1);
            }

            return data.ToString();
        }
    }

    public class VnPayCompare : IComparer<string>
    {
        public int Compare(string x, string y)
        {
            if (x == y) return 0;
            if (x == null) return -1;
            if (y == null) return 1;
            var vnpCompare = CompareInfo.GetCompareInfo("en-US");
            return vnpCompare.Compare(x, y, CompareOptions.Ordinal);
        }
    }
}

```

### Services\VNPay\VnPayService.cs
```cs
﻿using E_learning.DTO.Payment;

namespace E_learning.Services.VNPay
{
    public class VnPayService
    {
        private readonly IConfiguration _configuration;

        public VnPayService(IConfiguration configuration)
        {
            _configuration = configuration;
        }
        public string CreatePaymentUrl(PaymentRequestDTO model, HttpContext context, string courseID)
        {
            var timeZoneById = TimeZoneInfo.FindSystemTimeZoneById(_configuration["TimeZoneId"]);
            var timeNow = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZoneById);
            var tick = DateTime.Now.Ticks.ToString();
            var pay = new VnPayLibrary();


            var urlCallBack = _configuration["Vnpay:PaymentBackReturnUrl"];
            urlCallBack += $"?courseId={courseID}";
            var expireDate = timeNow.AddMinutes(15).ToString("yyyyMMddHHmmss");
            pay.AddRequestData("vnp_Version", _configuration["Vnpay:Version"]);
            pay.AddRequestData("vnp_Command", _configuration["Vnpay:Command"]);
            pay.AddRequestData("vnp_TmnCode", _configuration["Vnpay:TmnCode"]);
            pay.AddRequestData("vnp_Amount", ((int)model.Amount * 100).ToString());
            pay.AddRequestData("vnp_CreateDate", timeNow.ToString("yyyyMMddHHmmss"));
            pay.AddRequestData("vnp_CurrCode", _configuration["Vnpay:CurrCode"]);
            pay.AddRequestData("vnp_IpAddr", pay.GetIpAddress(context));
            pay.AddRequestData("vnp_Locale", _configuration["Vnpay:Locale"]);
            pay.AddRequestData("vnp_OrderInfo", $"{model.Name}|{model.OrderDescription}-{model.Amount}");
            pay.AddRequestData("vnp_OrderType", model.OrderType);
            pay.AddRequestData("vnp_ReturnUrl", urlCallBack);
            pay.AddRequestData("vnp_TxnRef", tick);
            pay.AddRequestData("vnp_ExpireDate", expireDate);

            var paymentUrl = pay.CreateRequestUrl(_configuration["Vnpay:BaseUrl"], _configuration["Vnpay:HashSecret"]);
            Console.WriteLine("Payment URL: " + paymentUrl);

            return paymentUrl;
        }


        public PaymentResponseDTO PaymentExecute(IQueryCollection collections)
        {
            var pay = new VnPayLibrary();
            var response = pay.GetFullResponseData(collections, _configuration["Vnpay:HashSecret"]);

            return response;
        }
    }
}

```
